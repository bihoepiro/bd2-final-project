# -*- coding: utf-8 -*-
"""RTree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PLn1O6wEIVyDqt_luKPdHihf4eKt4HO3
"""

pip install Rtree

!pip install rtree
from rtree import index
#usamos esta libreria para indexar todos los vectores caracteristicos
import pandas as pd
import numpy as np
import time

data = pd.read_csv("Vec_caract_300.csv")
ids = data.iloc[:,0].to_numpy()
feature_vectors = data.iloc[:, 1:].astype(float).to_numpy()
datainfo = pd.DataFrame(pd.read_csv("only_letras.csv"))

import pandas as pd
import numpy as np
from rtree import index

class KNNRTree:
    def __init__(self):
        self.index = None
        self.collection = []
        self.id_to_vector = {}


    def load_features_from_csv(self, csv_path: str):
        df = pd.read_csv(csv_path)
        ids = df.iloc[:, 0].to_numpy()
        self.collection = df.iloc[:, 1:].astype(float).to_numpy()
        self.id_to_vector = {id_: vector for id_, vector in enumerate(self.collection)}


    def build_index(self):
        d = self.collection.shape[1]
        p = index.Property()
        p.dimension = d
        self.index = index.Index(properties=p)
        for id_, vector in self.id_to_vector.items():
            self.index.insert(id_, (*vector, *vector))

    def knn_query(self, query_features: np.ndarray, k: int) -> list:
        if self.index is None:
            raise ValueError("Index has not been built.")

        nearest_neighbors = list(self.index.nearest(coordinates=tuple(query_features), num_results=k))
        results = []
        for nn in nearest_neighbors:
            vector = self.id_to_vector[nn]
            distance = np.linalg.norm(np.array(vector) - query_features)
            results.append((datainfo["name"][nn], distance))

        return results

# Cargar los datos
data = pd.read_csv("Vec_caract_300.csv")
ids = data.iloc[:, 0].to_numpy()
feature_vectors = data.iloc[:, 1:].astype(float).to_numpy()

# Crear el objeto KNNRTree
knn_rtree = KNNRTree()
knn_rtree.load_features_from_csv("Vec_caract_300.csv")
knn_rtree.build_index()

# Realizar una consulta KNN
query_vector = feature_vectors[0]
results = knn_rtree.knn_query(query_vector, k=5)
print(results)

myindexrtree = KNNRTree()
myindexrtree.load_features_from_csv("Vec_caract_300.csv")
tiempo_inicio = time.time()
myindexrtree.build_index()
tiempo_fin = time.time()
tiempo_total = tiempo_fin - tiempo_inicio
print(f"Tiempo de ejecuci√≥n: {tiempo_total} segundos")

#prueba query knn
myindexrtree.knn_query(feature_vectors[1], 5)
